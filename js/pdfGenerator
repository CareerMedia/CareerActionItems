// File: js/pdfGenerator.js

window.generatePDF = function(config, actions) {
  const { templateImageUrl, textPosition } = config;
  const x = textPosition.x, y = textPosition.y;
  const lineHeight = textPosition.lineHeight, fontSize = textPosition.fontSize;
  const urlRegex = /(https?:\/\/[^\s]+)/g;

  const { jsPDF } = window.jspdf;
  const doc = new jsPDF({ unit: 'px', format: 'a4' });
  doc.setFontSize(fontSize);

  const img = new Image();
  img.crossOrigin = 'anonymous';
  img.onload = function() {
    doc.addImage(img, 'PNG', 0, 0,
      doc.internal.pageSize.getWidth(),
      doc.internal.pageSize.getHeight()
    );

    let cy = y;
    actions.forEach(text => {
      let cx = x, lastIndex = 0, match;
      urlRegex.lastIndex = 0;
      while ((match = urlRegex.exec(text)) !== null) {
        if (match.index > lastIndex) {
          const prefix = text.slice(lastIndex, match.index);
          doc.text(prefix, cx, cy);
          cx += doc.getTextWidth(prefix);
        }
        const url = match[0];
        doc.text(url, cx, cy);
        doc.link(cx, cy - fontSize + 2, doc.getTextWidth(url), fontSize, { url });
        cx += doc.getTextWidth(url);
        lastIndex = match.index + url.length;
      }
      if (lastIndex < text.length) {
        const suffix = text.slice(lastIndex);
        doc.text(suffix, cx, cy);
      }
      cy += lineHeight;
    });

    doc.save('action-plan.pdf');
  };
  img.onerror = () => alert('Failed to load background image.');
  img.src = templateImageUrl;
};
